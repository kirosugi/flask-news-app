from flask import Flask, render_template, request
import requests
from deep_translator import GoogleTranslator
import os
from dotenv import load_dotenv
from bs4 import BeautifulSoup

# ‡πÇ‡∏´‡∏•‡∏î‡∏Ñ‡πà‡∏≤‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏à‡∏≤‡∏Å .env
load_dotenv()

app = Flask(__name__)

# API Key ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏∂‡∏á‡∏Ç‡πà‡∏≤‡∏ß
API_KEY = os.getenv("NEWS_API_KEY")

if not API_KEY:
    raise ValueError("‚ùå ERROR: ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ NEWS_API_KEY ‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå .env")

# URL ‡πÅ‡∏´‡∏•‡πà‡∏á‡∏Ç‡πà‡∏≤‡∏ß (‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ç‡πà‡∏≤‡∏ß‡πÄ‡∏ó‡∏Ñ‡πÇ‡∏ô‡πÇ‡∏•‡∏¢‡∏µ)
NEWS_API = f"https://newsapi.org/v2/top-headlines?category=technology&language=en&apiKey={API_KEY}"

def get_news_from_api():
    """‡∏î‡∏∂‡∏á‡∏Ç‡πà‡∏≤‡∏ß‡∏à‡∏≤‡∏Å API ‡πÅ‡∏•‡∏∞‡πÅ‡∏õ‡∏•‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏ó‡∏¢"""
    try:
        response = requests.get(NEWS_API)
        data = response.json().get("articles", [])
        news_list = []

        for idx, article in enumerate(data):
            title = article.get("title", "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠")
            description = article.get("description", "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢")
            url = article.get("url", "#")
            image = article.get("urlToImage", "")
            source = article.get("source", {}).get("name", "‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö‡πÅ‡∏´‡∏•‡πà‡∏á‡∏ó‡∏µ‡πà‡∏°‡∏≤")
            published_at = article.get("publishedAt", "‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏ú‡∏¢‡πÅ‡∏û‡∏£‡πà")

            title_th = GoogleTranslator(source='en', target='th').translate(title)
            desc_th = GoogleTranslator(source='en', target='th').translate(description)

            news_list.append({
                "id": idx,  # ‡πÉ‡∏ä‡πâ index ‡πÄ‡∏õ‡πá‡∏ô id
                "title": title_th,
                "description": desc_th,
                "url": url,
                "image": image,
                "source": source,
                "published_at": published_at
            })

        return news_list
    except Exception as e:
        print(f"‚ùå Error fetching API news: {e}")
        return []

def fetch_article_content(url):
    """‡∏î‡∏∂‡∏á‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏Ç‡πà‡∏≤‡∏ß‡∏à‡∏≤‡∏Å URL ‡πÅ‡∏•‡∏∞‡πÅ‡∏õ‡∏•‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏ó‡∏¢"""
    try:
        headers = {"User-Agent": "Mozilla/5.0"}
        response = requests.get(url, headers=headers)
        soup = BeautifulSoup(response.text, "html.parser")

        # ‡∏•‡∏≠‡∏á‡∏î‡∏∂‡∏á‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏à‡∏≤‡∏Å‡πÅ‡∏ó‡πá‡∏Å <p>
        paragraphs = soup.find_all("p")
        content = "\n".join(p.get_text() for p in paragraphs[:5])  # ‡πÄ‡∏≠‡∏≤‡πÅ‡∏Ñ‡πà 5 ‡∏¢‡πà‡∏≠‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏£‡∏Å

        # ‡πÅ‡∏õ‡∏•‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏ó‡∏¢
        content_th = GoogleTranslator(source='en', target='th').translate(content)

        return content_th if content_th else "‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏Ç‡πà‡∏≤‡∏ß‡∏ô‡∏µ‡πâ‡πÑ‡∏î‡πâ"
    except Exception as e:
        print(f"‚ùå Error fetching article content: {e}")
        return "‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏Ç‡πà‡∏≤‡∏ß‡∏ô‡∏µ‡πâ‡πÑ‡∏î‡πâ"

@app.route("/")
def home():
    """‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å + ‡πÅ‡∏ö‡πà‡∏á‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πà‡∏≤‡∏ß"""
    news = get_news_from_api()
    
    # ‡∏Å‡∏≤‡∏£‡πÅ‡∏ö‡πà‡∏á‡∏´‡∏ô‡πâ‡∏≤
    page = request.args.get("page", 1, type=int)
    per_page = 9  # ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πà‡∏≤‡∏ß‡∏•‡∏∞ 9 ‡∏Ç‡πà‡∏≤‡∏ß‡∏ï‡πà‡∏≠‡∏´‡∏ô‡πâ‡∏≤
    total_pages = (len(news) + per_page - 1) // per_page  # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    start = (page - 1) * per_page
    end = start + per_page
    news_paginated = news[start:end]  # ‡∏î‡∏∂‡∏á‡∏Ç‡πà‡∏≤‡∏ß‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£

    return render_template("index.html", news=news_paginated, page=page, total_pages=total_pages)

@app.route("/article/<int:article_id>")
def article(article_id):
    """‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏Ç‡πà‡∏≤‡∏ß"""
    news = get_news_from_api()
    
    if 0 <= article_id < len(news):
        article = news[article_id]
        content = fetch_article_content(article["url"])  # ‡∏î‡∏∂‡∏á‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏Ç‡πà‡∏≤‡∏ß
        
        return render_template("article.html", article=article, content=content)
    
    return "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πà‡∏≤‡∏ß‡∏ô‡∏µ‡πâ", 404

if __name__ == "__main__":
    app.run(debug=True)
from datetime import datetime
import pytz

def get_news_from_api():
    """‡∏î‡∏∂‡∏á‡∏Ç‡πà‡∏≤‡∏ß‡∏à‡∏≤‡∏Å API ‡πÅ‡∏•‡∏∞‡πÅ‡∏õ‡∏•‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÑ‡∏ó‡∏¢"""
    try:
        response = requests.get(NEWS_API)
        data = response.json().get("articles", [])
        news_list = []

        bangkok_tz = pytz.timezone("Asia/Bangkok")

        for idx, article in enumerate(data):
            title = article.get("title", "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠")
            description = article.get("description", "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢")
            url = article.get("url", "#")
            image = article.get("urlToImage", "")
            published_at = article.get("publishedAt", "")

            # ‡πÅ‡∏õ‡∏•‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÑ‡∏ó‡∏¢
            if published_at:
                dt_utc = datetime.strptime(published_at, "%Y-%m-%dT%H:%M:%SZ")
                dt_bkk = dt_utc.replace(tzinfo=pytz.utc).astimezone(bangkok_tz)
                published_at_th = dt_bkk.strftime("%d/%m/%Y %H:%M ‡∏ô.")
            else:
                published_at_th = "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏"

            # ‡πÅ‡∏õ‡∏•‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢
            title_th = GoogleTranslator(source='en', target='th').translate(title)
            desc_th = GoogleTranslator(source='en', target='th').translate(description)

            news_list.append({
                "id": idx,
                "title": title_th,
                "description": desc_th,
                "url": url,
                "image": image,
                "published_at_th": published_at_th
            })

        return news_list
    except Exception as e:
        print(f"‚ùå Error fetching API news: {e}")
        return []
import deepl

DEEPL_API_KEY = "your-deepl-api-key"  # üîπ ‡πÉ‡∏™‡πà API Key ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì

def translate_text_deepl(text):
    try:
        translator = deepl.Translator(DEEPL_API_KEY)
        result = translator.translate_text(text, target_lang="TH")  # ‡πÅ‡∏õ‡∏•‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏ó‡∏¢
        return result.text
    except Exception as e:
        print(f"‚ùå DeepL Error: {e}")
        return text  # ‡∏ñ‡πâ‡∏≤‡πÅ‡∏õ‡∏•‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ ‡πÉ‡∏´‡πâ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡πÄ‡∏î‡∏¥‡∏°

